下面是一个基本的功能需求列表，每个团队需要完成基本的功能。

1.输入收集： 把各种模态的输入变为文字，保存到数据库。
  1.1 输入是文本文件
  1.2 输入是 PowerPoint 文件
  1.3 输入是 pdf 文件
  1.4 输入是音频文件
  1.5 输入是视频文件
  1.6 输入是视频文件，其中视频中有文字信息（例如是在播放 PowerPoint），它们也要被保存到数据库

2.处理： 分析数据库里面的 ”内容“， 把它们变成各种各样的测试题目（目前是 选择题）
  2.1 输出有四个选项的选择题，只有一个答案是完全符合题目要求的。
  2.2 输出每道题目的时间不能多于 10 秒钟。
  2.3 建立一个测试集合， 有典型的各种文本 （如，讲解编程语言的讲稿， 介绍某个历史事件的讲稿，等），输出选择题， 并且这个选择题能让目标用户觉得有足够的难度，而不是非常浅显，或文不对题。
  2.4 建立一个持续调用 AI 大语言模型，检查输出的结果，并不断提高输出质量 （通过更好的提示词和提供更多素材）的闭环。 这个闭环不光是简单地把提示词发给 AI，然后就把结果传给用户。它应该是一套对因果，权责有强约束力的行为链条，如果AI 返回的题目太肤浅，你会怎么检测出来这个 “太肤浅” 的状态，你怎么让 AI 创造出更 “深刻” 的题目？ 如果 AI 并没有理解你传入的文本信息， 你如何检测到这个信息并让 AI 接触到更核心，更广泛的上下文（context）？

3.输出+用户交互：把题目通过网页 app 和用户交互， 用户信息管理， 收集反馈/判题/统计数据， 发给用户和内容的创造者 （老师， 演讲者，组织者，等）。
  3.1 构建一个简单的网页 app，能演示从用户（听众）看到题目，回答题目，回答多个题目，并返回用户回答正确与否，和统计信息（答对了多少）
  3.2 构建一个简单的网页 app，能演示演讲者看到的结果（有多少学生回答了第一题， 第二题，... 他们回答的准确率如何）
  3.3 构建一个简单的网页 app，能演示组织者看到的结果，可以选择 “演讲”，然后，不同的演讲有 N 个测试（quiz），不同测试的统计信息。 （多少人回答了，多少人没回答，多少人答对，等等） ，对于每个听众， 他们会收到 “我的回答正确率， 我在所有人中的排名，等信息）。
  3.4 用两个不同的文件作为输入，可以生成 5 个选择题， 有一个组织者，一个老师，三个听众， 能在网页 app 上完整演示所有功能。
  3.5 允许用户在答题外，反馈另外几个信息： 讲得太快，讲得太慢，演讲本身太乏味，题目出得质量不好，等反馈， 系统能处理这些反馈，并在给演讲者和组织者的报告中有显示。
  3.6 允许为每一个题目创建一个即时的讨论区， 一个题目的回答截止时间过后， 这个讨论区显示题目和选项， 让所有人在这里发评论。

4.在网页 app 上实现组织者，演讲者，听众的注册，登录等用户管理功能，各种讲课的管理 （演讲者 - 课程 - 听众）的关系要体现出来。